@model XerShade.Website.Core.Areas.User.Models.RegisterViewModel
@using XerShade.Website.Core.Services.Interfaces
@inject IOptionsService Options
@{
    Layout = "_Layout";
    ViewBag.Title = "Register";
}

<h2>Register</h2>

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}

@using (Html.BeginForm("Register", "Session", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-group">
        @Html.LabelFor(m => m.Email, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Password, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <b>Password Requirements:</b>
        <ul>
            <li>Minimum Length: @Options.Read("Core.Authentication.RequiredLength", 8)</li>
            @if (Options.Read("Core.Authentication.RequireNonAlphanumeric", false))
            {
                <li>Requires at least one non-alphanumeric character.</li>
            }
            @if (Options.Read("Core.Authentication.RequireDigit", true))
            {
                <li>Requires at least one digit.</li>
            }
            @if (Options.Read("Core.Authentication.RequireLowercase", true))
            {
                <li>Requires at least one lowercase character.</li>
            }
            @if (Options.Read("Core.Authentication.RequireUppercase", true))
            {
                <li>Requires at least one uppercase character.</li>
            }
        </ul>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <div class="checkbox">
                @Html.CheckBoxFor(m => m.RememberMe)
                @Html.LabelFor(m => m.RememberMe)
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-primary" value="Register" />
        </div>
    </div>
}